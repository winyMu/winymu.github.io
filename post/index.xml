<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://winymu.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 May 2022 22:28:15 +0800</lastBuildDate><atom:link href="https://winymu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go垃圾回收</title>
      <link>https://winymu.github.io/post/gc/</link>
      <pubDate>Wed, 04 May 2022 22:28:15 +0800</pubDate>
      
      <guid>https://winymu.github.io/post/gc/</guid>
      <description>三色标记，是标记清扫的优化，前者gc可以与应用程序并行处理 三色不变性： 强：黑色是对象不能引用白色对象 弱：黑色可以间接引用白色，但是中间必须有灰色对象 保证并发正确性，即不会误把运行的对象清理掉 过程： 标记准备：暂停所有P，打开写屏障 标记：恢复运行，开始三色标记 标记结束：暂停，关闭写屏障 清理：开始运行，并发清理</description>
    </item>
    
    <item>
      <title>如何做好技术分享</title>
      <link>https://winymu.github.io/post/present_share/</link>
      <pubDate>Mon, 27 Apr 2020 22:28:15 +0800</pubDate>
      
      <guid>https://winymu.github.io/post/present_share/</guid>
      <description>如何做好技术分享  目的和受众 准备阶段   搜集资料 深度与广度 术语，保留 排版与格式  演讲阶段   开场，“介绍xxx的知识，希望大家加深对xxx的理解“ 节奏，太快容易让人理解不清，太慢容易让人昏昏欲睡，重点图表加长时间停留，重点理解 沉淀总结  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://winymu.github.io/post/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://winymu.github.io/post/architecture/</guid>
      <description>架构模式 微服务 弊端：
 服务规模庞大，不利于运维 不利于重复利用，一组服务才能提供完整的功能 相互耦合，服务之间相互依赖 逻辑冗余，不同的服务都需要相同的功能，例如鉴权 客户端臃肿，需要对接不同的服务  领域驱动设计 弊端：
 不同领域会用到相同功能，功能出问题或者重构，会影响所有的其所在的领域，需要全部重建 领域不能提供完整功能，不利于单元测试  开放模式 who(client) -&amp;gt; what(manager) -&amp;gt; how(engine/ral) -&amp;gt; where(resource)
 完全开放 层次间相互调用 完全封闭 上层调用下层，通层之间相互调用 半封闭 下层偶尔可以调用上层  包和组件的三角模式原则 内聚性： REP &amp;mdash; CCP \ / \ / \ / CRP REP : Reuse-Release Equivalence Principle, 重用-发布等价原则 CCP : Common-Closure Principle, 共同闭包原则 （类似SRP）着重【隔离性、可维护性】
 一个原因的变化不能引起多个包的变化，相同功能的类或者组件需要放到一个包中 CRP : Common-Reuse Principle, 共同复用原则，着重【复用性】 确保包中的类是不可分开的，如果重用了一个类，就必须重用所有的类  耦合性 SDP 稳定依赖原则 SAP 稳定抽象原则 ADP 无依赖环原则</description>
    </item>
    
    <item>
      <title></title>
      <link>https://winymu.github.io/post/business/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://winymu.github.io/post/business/</guid>
      <description>赚钱方式
 阿尔法方式，时代的红利，例如互联网、mcn、公众号 贝塔方式，行业深耕，勤恳努力 同时赚取  如何做？ 想-&amp;gt;听（听别人说）-&amp;gt;做
 思考不同行业的商业模式 听别人说教，忍住难受，榨取最后一点价值 情绪控制，不做情绪的奴隶 不要懒，愿意干别人不愿干的脏活、累活，延迟满足；做内容的生产者  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://winymu.github.io/post/feiman/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://winymu.github.io/post/feiman/</guid>
      <description>输出倒逼输入 路径：获取、挑选、吸收、简化、创作
 获取知识   多途径，网络、图书；需要先明确自己的需求，有目的的去获取、探索  挑选   多角度论证、反证  吸收   输出、回顾、再输出  简化   用自己的语言重新组织，梳理核心逻辑  创作   利用已吸收的知识，融会贯通，创作新的知识  </description>
    </item>
    
  </channel>
</rss>
